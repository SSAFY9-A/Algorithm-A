#재귀

[for() 설계]
1.map에서 1인 부분을 찾음
2. 네 방향으로 for 돌려서 방향 확인
	2-1.check함수 만들어서 해당 방향 가능한지 확인 (1.가능, 0.불가능)
3. 가능한 방향이라면 전선수 증가, 전선 2로 채움
	3-1. 전선수 증가한다면 가지치기
	3-2. 2로 채웠다가 다시 0으로 복구 해야하므로 좌표와 방향 받아서 함수(inoutmap)
4. 같은 라인에 cell이 또 있을 수 있으니 level은 같게 x값만 증가하여 돌림. 
	4-1.for 끝나고 level 증가.

[return 설계]
level이 마지막이라면?
1. 코어가 최대보다 크다면 업데이트
2.코어의 최댓값이 같고, 전선수가 min  이라면 업데이트


#함수
check 함수
상하좌우 전선을 놓을 수 있는지 확인
(d=0 상, d=1 하, d=2좌, d=3 우)
int check(int y, int x, int d)

inoutmap 함수
map[y][x]에서 d방향으로 n값을 채워줌.
(n 은 전선을 뜻하는 2와 이를 복구하기 위한 0이 들어감.) 
void inoutMap(int y, int x, int d,int n)

datamap 함수
전선의 수를 미리 파악하기 위한 함수
예약개념. 해당하는 d 방향으로 채운다면? return 전선수
int dataMap(int y, int x, int d)
